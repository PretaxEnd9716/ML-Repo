smokeModel <- Mclust(smokeSubset[6:7])
summary(smokeModel)
library(mclust)
smokeDens <- densityMclust(smokeSubset[6:7])
plot(smokeDens, what="density", type="persp")
smokeModel <- Mclust(smokeSubset[6:7])
plot(smokeModel, what="classification")
summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[c(6, 7)], function(x) c(scale(x)))
smokeDens <- densityMclust(scaledCol)
plot(smokeDens, what="density", type="persp")
smokeModel <- Mclust(scaledCol)
plot(smokeModel, what="classification")
summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[c(6, 7)], function(x) c(scale(x)))
smokeDens <- densityMclust(scaledCol)
library(mclust)
scaledCol <- sapply(smokeSubset[c(6, 7)], function(x) c(scale(x)))
smokeDens <- densityMclust(scaledCol)
plot(smokeDens, what="density", type="persp")
smokeModel <- Mclust(scaledCol)
plot(smokeModel)
summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[], function(x) c(scale(x)))
library(mclust)
scaledCol <- sapply(smokeSubset[1:12], function(x) c(scale(x)))
smokeDens <- densityMclust(scaledCol)
plot(smokeDens, what="density")
#smokeModel <- Mclust(scaledCol)
#plot(smokeModel)
#summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[1:12], function(x) c(scale(x)))
#smokeDens <- densityMclust(scaledCol)
#plot(smokeDens, what="density")
smokeDens <- densityMclust(scaledCol[1:2])
plot(smokeDens, what="density")
#smokeModel <- Mclust(scaledCol)
#plot(smokeModel)
#summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[1:12], function(x) c(scale(x)))
#smokeDens <- densityMclust(scaledCol)
#plot(smokeDens, what="density")
smokeDens <- densityMclust(scaledCol)
library(mclust)
scaledCol <- sapply(smokeSubset[1:12], function(x) c(scale(x)))
#smokeDens <- densityMclust(scaledCol)
#plot(smokeDens, what="density")
smokeDens <- densityMclust(scaledCol[:2])
library(mclust)
scaledCol <- sapply(smokeSubset[1:12], function(x) c(scale(x)))
#smokeDens <- densityMclust(scaledCol)
#plot(smokeDens, what="density")
smokeDens <- densityMclust(scaledCol[1:2])
plot(smokeDens)
#smokeModel <- Mclust(scaledCol)
#plot(smokeModel)
#summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[1:12], function(x) c(scale(x)))
#smokeDens <- densityMclust(scaledCol)
#plot(smokeDens, what="density")
#smokeDens <- densityMclust(scaledCol[1:2])
#plot(smokeDens)
smokeModel <- Mclust(scaledCol[1:2])
plot(smokeModel)
#summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[1:2], function(x) c(scale(x)))
#smokeDens <- densityMclust(scaledCol)
#plot(smokeDens, what="density")
#smokeDens <- densityMclust(scaledCol[1:2])
#plot(smokeDens)
smokeModel <- Mclust(scaledCol)
plot(smokeModel)
#summary(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[1:2], function(x) c(scale(x)))
#smokeDens <- densityMclust(scaledCol)
#plot(smokeDens, what="density")
#smokeDens <- densityMclust(scaledCol[1:2])
#plot(smokeDens)
smokeModel <- Mclust(scaledCol)
plot(smokeModel)
library(mclust)
scaledCol <- sapply(smokeSubset[7:11], function(x) c(scale(x)))
smokeDens <- densityMclust(scaledCol)
plot(smokeDens, what="density")
library(mclust)
scaledCol <- sapply(smokeSubset[c(7,11)], function(x) c(scale(x)))
smokeDens <- densityMclust(scaledCol)
plot(smokeDens, what="density")
smokeModel <- Mclust(scaledCol)
plot(smokeModel)
summary(smokeModel)
library(flexclust)
#Subset Data
set.seed(10622)
i <- sample(1:nrow(smokeData), .2*nrow(smokeData), replace = FALSE)
smokeSubset <- smokeData[i,]
#Scale Data
scaledDist <- dist(scale(smokeSubset[1:12]))
#Hierarchical Clustering
smokeHClust <- hclust(scaledDist[])
plot(smokeHClust)
for (cut in 2:40)
{
smokeCut <- cutree(smokeHClust, cut)
smokeTable <- table(smokeCut, smokeSubset$Fire.Alarm)
print(smokeTable)
smokeRI <- randIndex(smokeTable)
print(paste(cut,"RI: ", smokeRI))
}
airplaneData <- read.csv("Data/airplaneData.csv", header = TRUE)
#Convert survey items to factors
cols <- c("Gender", "Customer.Type", "Class", "Inflight.wifi.service", "Departure.Arrival.time.convenient", "Ease.of.Online.booking", "Food.and.drink", "Online.boarding", "Seat.comfort", "Inflight.entertainment", "On.board.service", "Leg.room.service", "Baggage.handling", "Checkin.service", "Inflight.service", "Cleanliness", "satisfaction")
airplaneData[cols] <- lapply(airplaneData[cols], as.factor)
#Drop X, ID, and Gate Location
airplaneData <- subset(airplaneData, select = -c(X, id, Gate.location))
#Obtain only numeric columns
numCol <- unlist(lapply(airplaneData, is.numeric))
#Convert arrival delay to int
airplaneData$Arrival.Delay.in.Minutes <- as.integer(airplaneData$Arrival.Delay.in.Minutes)
set.seed(10622)
i <- sample(1:nrow(airplaneData), .80*nrow(airplaneData), replace = FALSE)
planeTrain <- airplaneData[i,]
planeTest <- airplaneData[-i,]
airplaneData <- read.csv("Data/airplaneData.csv", header = TRUE)
#Convert survey items to factors
cols <- c("Gender", "Customer.Type", "Class", "Inflight.wifi.service", "Departure.Arrival.time.convenient", "Ease.of.Online.booking", "Food.and.drink", "Online.boarding", "Seat.comfort", "Inflight.entertainment", "On.board.service", "Leg.room.service", "Baggage.handling", "Checkin.service", "Inflight.service", "Cleanliness", "satisfaction")
airplaneData[cols] <- lapply(airplaneData[cols], as.factor)
#Drop X, ID, and Gate Location
airplaneData <- subset(airplaneData, select = -c(X, id, Gate.location))
#Obtain only numeric columns
numCol <- unlist(lapply(airplaneData, is.numeric))
#Convert arrival delay to int
airplaneData$Arrival.Delay.in.Minutes <- as.integer(airplaneData$Arrival.Delay.in.Minutes)
set.seed(10622)
i <- sample(1:nrow(airplaneData), .80*nrow(airplaneData), replace = FALSE)
planeTrain <- airplaneData[i,]
planeTest <- airplaneData[-i,]
summary(planeTrain)
pairs(planeTrain[,numCol], col = c("red", "blue")[unclass(planeTrain$Customer.Type)])
#Scale Pressure and NC1.0
scaledCol <- sapply(smokeData[c(7, 11)], function(x) c(scale(x)))
#Scale Pressure and NC1.0
scaledCol <- sapply(smokeData[c(7, 11)], function(x) c(scale(x)))
smokeData <- read.csv("Data/smokeData.csv", header = TRUE)
#Remove unnecessary columns
smokeData <- subset(smokeData, select = -c(X,UTC,CNT))
#Convert fire alarm into factors
smokeData$Fire.Alarm <- as.factor(smokeData$Fire.Alarm)
plot(smokeData$Pressure.hPa., smokeData$NC1.0, col = c("red", "blue")[unclass(smokeData$Fire.Alarm)])
plot(smokeData$PM1.0, smokeData$TVOC.ppb., col = c("red", "blue")[unclass(smokeData$Fire.Alarm)])
#Scale Pressure and NC1.0
scaledCol <- sapply(smokeData[c(7, 11)], function(x) c(scale(x)))
#Kmeans
smokeKCluster <- kmeans(scaledCol, 2, nstart = 50)
smokeKCluster$withinss
table(smokeData$Fire.Alarm, smokeKCluster$cluster)
#Scale Pressure and NC1.0
scaledCol <- sapply(smokeData[c(7, 11)], function(x) c(scale(x)))
#Kmeans
smokeKCluster <- kmeans(scaledCol, 2, nstart = 50)
sum(smokeKCluster$withinss)
table(smokeData$Fire.Alarm, smokeKCluster$cluster)
#Scale Pressure and NC1.0
scaledCol <- sapply(smokeData[c(7, 11)], function(x) c(scale(x)))
#Kmeans
smokeKCluster <- kmeans(scaledCol, 2, nstart = 50)
smokeKCluster$withinss
table(smokeData$Fire.Alarm, smokeKCluster$cluster)
#Scale Pressure and NC1.0
scaledCol <- sapply(smokeData[c(7, 11)], function(x) c(scale(x)))
#Kmeans
smokeKCluster <- kmeans(scaledCol, 3, nstart = 50)
smokeKCluster$withinss
table(smokeData$Fire.Alarm, smokeKCluster$cluster)
setwd("~/GitHub/ML-Repo/HW 5")
bikeData <- read.csv("Data/BikeData", header = TRUE)
bikeData <- read.csv("Data/BikeData.csv", header = TRUE)
View(bikeData)
bikeData <- read.csv("Data/BikeData.csv", header = TRUE)
#Sets columns into of factors
colFactors <- c("weather_code", "is_holiday", "is_weekend", "season")
bikeData[colFactors] <- lapply(bikeData[colFactors], as.factor)
bikeData <- read.csv("Data/BikeData.csv", header = TRUE)
#Sets columns into of factors
colFactors <- c("weather_code", "is_holiday", "is_weekend", "season")
bikeData[colFactors] <- lapply(bikeData[colFactors], as.factor)
#Remove timestamp
bikeData <- subset(bikeData, select = -c(timestamp))
set.seed(9582)
i <- sample(1:nrow(bikeData), .80*nrow(bikeData), replace = FALSE)
bikeTrain <- bikeData[i,]
bikeTest <- bikeData[-i,]
summary(bikeTrain)
library(e1071)
#SVM
linearBikeSVM <- svm(cnt~., data = bikeTrain, kernel = "linear", cost = 10)
summary(linearSVM)
library(e1071)
#SVM
linearBikeSVM <- svm(cnt~., data = bikeTrain, kernel = "linear", cost = 1)
library(e1071)
#SVM
linearBikeSVM <- svm(cnt~., data = bikeTrain, kernel = "linear")
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
library(e1071)
#SVM
linearBikeSVM <- svm(cnt~., data = bikeTrain, kernel = "linear")
bikeData <- read.csv("Data/BikeData.csv", header = TRUE)
#Sets columns into of factors
colFactors <- c("weather_code", "is_holiday", "is_weekend", "season")
bikeData[colFactors] <- lapply(bikeData[colFactors], as.factor)
#Remove timestamp and t1
bikeData <- subset(bikeData, select = -c(timestamp, t1))
set.seed(9582)
i <- sample(1:nrow(bikeData), .80*nrow(bikeData), replace = FALSE)
bikeTrain <- bikeData[i,]
bikeTest <- bikeData[-i,]
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ t2 + hum, data = bikeTrain, kernel = "linear", cost = 100)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ t2 + is_weekend, data = bikeTrain, kernel = "linear", cost = 100)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ t2 + weather_code, data = bikeTrain, kernel = "linear", cost = 100)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ t2, data = bikeTrain, kernel = "linear", cost = 100)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
bikeData <- read.csv("Data/BikeData.csv", header = TRUE)
#Sets columns into of factors
colFactors <- c("weather_code", "is_holiday", "is_weekend", "season")
bikeData[colFactors] <- lapply(bikeData[colFactors], as.factor)
#Remove timestamp and t1
bikeData <- subset(bikeData, select = -c(timestamp, t1))
set.seed(9582)
spl <- c(train = .6, test = .2, validate = .2)
i <- sample(cut(1:nrow(bikeData), nrow(bikeData) * cumsum(c(0, spl)), labels = names(spl)))
bikeTrain <- bikeData[i == "train"]
set.seed(9582)
spl <- c(train = .6, test = .2, validate = .2)
i <- sample(cut(1:nrow(bikeData), nrow(bikeData) * cumsum(c(0, spl)), labels = names(spl)))
bikeTrain <- bikeData[i == "train",]
bikeTest <- bikeData[i == "test",]
bikeVal <- bikeData[i == "validate",]
summary(bikeTrain)
numCol <- unlist(lapply(bikeTrain, is.numeric))
pairs(bikeTrain[,numCol])
plot(bikeTrain$weather_code, bikeTrain$cnt, xlab = "Weather Code", ylab = "Bike Rentals")
bikeData <- read.csv("Data/BikeData.csv", header = TRUE)
#Sets columns into of factors
colFactors <- c("weather_code", "is_holiday", "is_weekend", "season")
bikeData[colFactors] <- lapply(bikeData[colFactors], as.factor)
#Remove timestamp and t1
bikeData <- subset(bikeData, select = -c(timestamp))
set.seed(9582)
spl <- c(train = .6, test = .2, validate = .2)
i <- sample(cut(1:nrow(bikeData), nrow(bikeData) * cumsum(c(0, spl)), labels = names(spl)))
bikeTrain <- bikeData[i == "train",]
bikeTest <- bikeData[i == "test",]
bikeVal <- bikeData[i == "validate",]
summary(bikeTrain)
numCol <- unlist(lapply(bikeTrain, is.numeric))
pairs(bikeTrain[,numCol])
plot(bikeTrain$weather_code, bikeTrain$cnt, xlab = "Weather Code", ylab = "Bike Rentals")
cdplot(bikeTrain$cnt, bikeTrain$is_weekend)
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ t2, data = bikeTrain, kernel = "linear", cost = 100)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#Get best cost
linearTune <- tune(svm, cnt ~ tw, data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
#Get best cost
linearTune <- tune(svm, cnt ~ t2, data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
#Get best cost
linearTune <- tune(svm, cnt ~ t2, data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
summary(linearTune)
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "linear")
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#Get best cost
linearTune <- tune(svm, cnt ~ t2, data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
summary(linearTune)
#Get best cost
linearTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
summary(linearTune)
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "linear", scale = TRUE)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#Get best cost
linearTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
summary(linearTune)
#Predict
linearSVMPredTuned <- predict(linearTune$best.model, newdata = bikeTest)
rmse <- mean((linearSVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#Get best cost
linearTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "linear", scale = TRUE, ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
#Get best cost
linearTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
summary(linearTune)
#Predict
linearSVMPredTuned <- predict(linearTune$best.model, newdata = bikeTest)
rmse <- mean((linearSVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#SVM
polyBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "polynomial", scale = TRUE)
summary(polyBikeSVM)
#Predict and RMSE
polySVMPred <- predict(polyBikeSVM, newdata = bikeTest)
rmse <- mean((polySVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
polyTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "polynomial", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
#Predict and RMSE
polySVMPredTuned <- predict(polyTune$best.model, newdata = bikeTest)
rmse <- mean((polySVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#SVM
radialBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "radial", scale = TRUE)
summary(radialBikeSVM)
#Predict and RMSE
radialSVMPred <- predict(radialBikeSVM, newdata = bikeTest)
rmse <- mean((radialSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
radialTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "radial", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
#Predict and RMSE
radialSVMPredTuned <- predict(radialTune$best.model, newdata = bikeTest)
rmse <- mean((radialSVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#SVM
radialBARSVM <- svm(bar_passed ~ ., data = BARTrain, kernel = "radial", scale = TRUE)
BARdata <- read.csv("Data/BarData.csv", header = TRUE, na.strings = c("", "NA"))
#Remove unneccessary factors
BARdata <- subset(BARdata, select = c(gender, lsat, bar_passed, ugpa))
#Remove NAs
BARdata <- na.omit(BARdata)
#Sets columns into factors
setToFactors <- c("gender", "bar_passed")
BARdata[setToFactors] <- lapply(BARdata[setToFactors], as.factor)
set.seed(1022)
spl <- c(train = .6, test = .2, validate = .2)
i <- sample(cut(1:nrow(BARdata), nrow(BARdata) * cumsum(c(0, spl)), labels = names(spl)))
BARTrain <- BARdata[i == "train",]
BARTest <- BARdata[i == "test",]
BARVal <- BARdata[i == "validate",]
library(e1071)
#SVM
linearBARSVM <- svm(bar_passed ~ ., data = BARTrain, kernel = "linear", scale = TRUE)
summary(linearBARSVM)
#Predictions and Accuracy
linearBARPredict <- predict(linearBARSVM, newdata = BARTest)
mean(linearBARPredict == BARTest$bar_passed)
linearTuned <- tune(svm, bar_passed~., data = BARVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 10)))
#Predict and RMSE
linearSVMTuned <- predict(linearTuned$best.model, newdata = BARTest)
mean(linearSVMTuned == BARTest$bar_passed)
#SVM
polyBARSVM <- svm(bar_passed ~ ., data = BARTrain, kernel = "polynomial", scale = TRUE)
summary(polyBARSVM)
#Predictions and Accuracy
polyBARPredict <- predict(polyBARSVM, newdata = BARTest)
mean(polyBARPredict == BARTest$bar_passed)
polyTuned <- tune(svm, bar_passed~., data = BARVal, kernel = "polynomial", ranges = list(cost = c(.001, .01, .1, 1, 10, 10)))
#Predict and RMSE
polySVMTuned <- predict(polyTuned$best.model, newdata = BARTest)
mean(polySVMTuned == BARTest$bar_passed)
#SVM
radialBARSVM <- svm(bar_passed ~ ., data = BARTrain, kernel = "radial", scale = TRUE)
summary(radialBARSVM)
#Predictions and Accuracy
radialBARPredict <- predict(radialBARSVM, newdata = BARTest)
mean(radialBARPredict == BARTest$bar_passed)
radialTuned <- tune(svm, bar_passed~., data = BARVal, kernel = "radial", ranges = list(cost = c(.001, .01, .1, 1, 10, 10)))
#Predict and RMSE
radialSVMTuned <- predict(radialTuned$best.model, newdata = BARTest)
mean(radialSVMTuned == BARTest$bar_passed)
bikeData <- read.csv("Data/BikeData.csv", header = TRUE)
#Sets columns into factors
colFactors <- c("weather_code", "is_holiday", "is_weekend", "season")
bikeData[colFactors] <- lapply(bikeData[colFactors], as.factor)
#Remove timestamp
bikeData <- subset(bikeData, select = -c(timestamp))
set.seed(9582)
spl <- c(train = .6, test = .2, validate = .2)
i <- sample(cut(1:nrow(bikeData), nrow(bikeData) * cumsum(c(0, spl)), labels = names(spl)))
bikeTrain <- bikeData[i == "train",]
bikeTest <- bikeData[i == "test",]
bikeVal <- bikeData[i == "validate",]
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "linear", scale = TRUE)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#Get best cost
linearTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10)))
#SVM
polyBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "polynomial", scale = TRUE)
summary(polyBikeSVM)
#Predict and RMSE
polySVMPred <- predict(polyBikeSVM, newdata = bikeTest)
rmse <- mean((polySVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#SVM
radialBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "radial", scale = TRUE)
summary(radialBikeSVM)
#Predict and RMSE
radialSVMPred <- predict(radialBikeSVM, newdata = bikeTest)
rmse <- mean((radialSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
radialTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "radial", ranges = list(cost = c(.001, .01, .1, 1, 5, 10)))
#Predict and RMSE
radialSVMPredTuned <- predict(radialTune$best.model, newdata = bikeTest)
rmse <- mean((radialSVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
polyTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "polynomial", ranges = list(cost = c(.001, .01, .1, 1, 5, 10)))
#Predict and RMSE
polySVMPredTuned <- predict(polyTune$best.model, newdata = bikeTest)
rmse <- mean((polySVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#Get best cost
linearTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10)))
#Predict and RMSE
linearSVMPredTuned <- predict(linearTune$best.model, newdata = bikeTest)
rmse <- mean((linearSVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
library(e1071)
#SVM
linearBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "linear", scale = TRUE)
summary(linearBikeSVM)
#Predict and RMSE
linearSVMPred <- predict(linearBikeSVM, newdata = bikeTest)
rmse <- mean((linearSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#SVM
polyBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "polynomial", scale = TRUE)
summary(polyBikeSVM)
#Predict and RMSE
polySVMPred <- predict(polyBikeSVM, newdata = bikeTest)
rmse <- mean((polySVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#SVM
radialBikeSVM <- svm(cnt ~ ., data = bikeTrain, kernel = "radial", scale = TRUE)
summary(radialBikeSVM)
#Predict and RMSE
radialSVMPred <- predict(radialBikeSVM, newdata = bikeTest)
rmse <- mean((radialSVMPred - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
#Get best cost
linearTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10)))
#Predict and RMSE
linearSVMPredTuned <- predict(linearTune$best.model, newdata = bikeTest)
rmse <- mean((linearSVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
polyTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "polynomial", ranges = list(cost = c(.001, .01, .1, 1, 5, 10)))
#Predict and RMSE
polySVMPredTuned <- predict(polyTune$best.model, newdata = bikeTest)
rmse <- mean((polySVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
radialTune <- tune(svm, cnt ~ ., data = bikeVal, kernel = "radial", ranges = list(cost = c(.001, .01, .1, 1, 5, 10)))
#Predict and RMSE
radialSVMPredTuned <- predict(radialTune$best.model, newdata = bikeTest)
rmse <- mean((radialSVMPredTuned - bikeTest$cnt)^2)
print(paste("RMSE = ", rmse))
