#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,21)]
uTest <- airplaneData[unlabeled==2, c(6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
planeKnn <- knn(train = uTrain[1,], test = uTest[1,], cl = uTrainLabel, k = 3)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,21)]
uTest <- airplaneData[unlabeled==2, c(6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
planeKnn <- knn(train = uTrain[2,], test = uTest[2,], cl = uTrainLabel, k = 3)
attach(iris)
str(iris)    # display the structure of the object
summary(iris)
set.seed(1958)  # setting a seed gets the same results every time
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind == 2
iris.train <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]
View(iris.train)
set.seed(1958)  # setting a seed gets the same results every time
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind == 1
iris.train <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]
set.seed(1958)  # setting a seed gets the same results every time
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind == 2
iris.train <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]
set.seed(1958)  # setting a seed gets the same results every time
ind <- sample(1, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
airplaneData <- read.csv("Data/airplaneData.csv", header = TRUE)
#Convert survey items to factors
cols <- c("Gender", "Customer.Type", "Class", "Inflight.wifi.service", "Departure.Arrival.time.convenient", "Ease.of.Online.booking", "Food.and.drink", "Online.boarding", "Seat.comfort", "Inflight.entertainment", "On.board.service", "Leg.room.service", "Baggage.handling", "Checkin.service", "Inflight.service", "Cleanliness", "satisfaction")
airplaneData[cols] <- lapply(airplaneData[cols], as.factor)
#Drop X, ID, and Gate Location
airplaneData <- subset(airplaneData, select = -c(X, id, Gate.location))
#Obtain only numeric columns
numCol <- unlist(lapply(airplaneData, is.numeric))
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,21)]
uTest <- airplaneData[unlabeled==2, c(6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
set.seed(10622)
i <- sample(1:nrow(airplaneData), .80*nrow(airplaneData), replace = FALSE)
planeTrain <- airplaneData[i,]
planeTest <- airplaneData[-i,]
airplaneData <- read.csv("Data/airplaneData.csv", header = TRUE)
#Convert survey items to factors
cols <- c("Gender", "Customer.Type", "Class", "Inflight.wifi.service", "Departure.Arrival.time.convenient", "Ease.of.Online.booking", "Food.and.drink", "Online.boarding", "Seat.comfort", "Inflight.entertainment", "On.board.service", "Leg.room.service", "Baggage.handling", "Checkin.service", "Inflight.service", "Cleanliness", "satisfaction")
airplaneData[cols] <- lapply(airplaneData[cols], as.factor)
#Drop X, ID, and Gate Location
airplaneData <- subset(airplaneData, select = -c(X, id, Gate.location))
#Obtain only numeric columns
numCol <- unlist(lapply(airplaneData, is.numeric))
set.seed(10622)
i <- sample(1:nrow(airplaneData), .80*nrow(airplaneData), replace = FALSE)
planeTrain <- airplaneData[i,]
planeTest <- airplaneData[-i,]
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,21)]
uTest <- airplaneData[unlabeled==2, c(6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
attach(iris)
str(iris)    # display the structure of the object
summary(iris)
set.seed(1958)  # setting a seed gets the same results every time
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind == 2
iris.train <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,21)]
uTest <- airplaneData[unlabeled==2, c(6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
View(planeTest)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,21)]
uTest <- airplaneData[unlabeled==2, c(6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,21)]
uTest <- airplaneData[unlabeled==2, c(6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
str(uTrain)
knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
airplaneData <- read.csv("Data/airplaneData.csv", header = TRUE)
#Convert survey items to factors
cols <- c("Gender", "Customer.Type", "Class", "Inflight.wifi.service", "Departure.Arrival.time.convenient", "Ease.of.Online.booking", "Food.and.drink", "Online.boarding", "Seat.comfort", "Inflight.entertainment", "On.board.service", "Leg.room.service", "Baggage.handling", "Checkin.service", "Inflight.service", "Cleanliness", "satisfaction")
airplaneData[cols] <- lapply(airplaneData[cols], as.factor)
#Drop X, ID, and Gate Location
airplaneData <- subset(airplaneData, select = -c(X, id, Gate.location))
#Obtain only numeric columns
numCol <- unlist(lapply(airplaneData, is.numeric))
set.seed(10622)
i <- sample(1:nrow(airplaneData), .80*nrow(airplaneData), replace = FALSE)
planeTrain <- airplaneData[i,]
planeTest <- airplaneData[-i,]
View(planeTest)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
str(uTrain)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
#Obtain Accuracy
knnResults <- knnPlane == uTestLabel
acc <- length(which(knnResults == TRUE)) / length(knnResults)
acc
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,1)]
uTest <- airplaneData[unlabeled==2, c(6,20,1)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20,1)]
uTest <- airplaneData[unlabeled==2, c(6,20,1)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
#uTrainScale <- scale(uTrain)
#uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
#Obtain Accuracy
knnResults <- knnPlane == uTestLabel
acc <- length(which(knnResults == TRUE)) / length(knnResults)
acc
library(tree)
download.packages("tree")
install.packages("tree")
library(tree)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
#Obtain Accuracy
knnResults <- knnPlane == uTestLabel
acc <- length(which(knnResults == TRUE)) / length(knnResults)
acc
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Age + Departure.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Arrival.Delay.in.Minutes + Departure.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Flight.Distance + Arrival.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Flight.Distance + Arrival.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Flight.Distance + Arrival.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
mean(pred == as.integer(planeTest$Customer.Type))
#print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Flight.Distance + Arrival.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob > .5, 2, 1)
mean(pred == as.integer(planeTest$Customer.Type))
#print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Age + Departure.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Flight.Distance + Departure.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
airplaneData <- read.csv("Data/airplaneData.csv", header = TRUE)
#Convert survey items to factors
cols <- c("Gender", "Customer.Type", "Class", "Inflight.wifi.service", "Departure.Arrival.time.convenient", "Ease.of.Online.booking", "Food.and.drink", "Online.boarding", "Seat.comfort", "Inflight.entertainment", "On.board.service", "Leg.room.service", "Baggage.handling", "Checkin.service", "Inflight.service", "Cleanliness", "satisfaction")
airplaneData[cols] <- lapply(airplaneData[cols], as.factor)
#Drop X, ID, and Gate Location
airplaneData <- subset(airplaneData, select = -c(X, id, Gate.location))
#Obtain only numeric columns
numCol <- unlist(lapply(airplaneData, is.numeric))
#Convert arrival delay to int
airplaneData$Arrival.Delay.in.Minutes <- as.integer(airplaneData$Arrival.Delay.in.Minutes)
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Arrival.Delay.in.Minutes + Departure.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
airplaneData <- read.csv("Data/airplaneData.csv", header = TRUE)
#Convert survey items to factors
cols <- c("Gender", "Customer.Type", "Class", "Inflight.wifi.service", "Departure.Arrival.time.convenient", "Ease.of.Online.booking", "Food.and.drink", "Online.boarding", "Seat.comfort", "Inflight.entertainment", "On.board.service", "Leg.room.service", "Baggage.handling", "Checkin.service", "Inflight.service", "Cleanliness", "satisfaction")
airplaneData[cols] <- lapply(airplaneData[cols], as.factor)
#Drop X, ID, and Gate Location
airplaneData <- subset(airplaneData, select = -c(X, id, Gate.location))
#Obtain only numeric columns
numCol <- unlist(lapply(airplaneData, is.numeric))
#Convert arrival delay to int
airplaneData$Arrival.Delay.in.Minutes <- as.integer(airplaneData$Arrival.Delay.in.Minutes)
set.seed(10622)
i <- sample(1:nrow(airplaneData), .80*nrow(airplaneData), replace = FALSE)
planeTrain <- airplaneData[i,]
planeTest <- airplaneData[-i,]
summary(planeTrain)
pairs(planeTrain[,numCol], col = c("red", "blue")[unclass(planeTrain$Customer.Type)])
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Arrival.Delay.in.Minutes + Departure.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
#Create Logistic Regression Model
custLr <- glm(Customer.Type~Flight.Distance + Departure.Delay.in.Minutes, data=planeTrain,family="binomial")
#Metrics
summary(custLr)
prob <- predict(custLr, newdata=planeTest, type="response")
pred <- ifelse(prob>.5,1,0)
acc <- mean(pred==as.integer(planeTest$Customer.Type))
print(paste("Accuracy = ", acc))
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
#Obtain Accuracy
knnResults <- knnPlane == uTestLabel
acc <- length(which(knnResults == TRUE)) / length(knnResults)
acc
#Find the size to prune
cv <- cv.tree(planeTree)
#Find the size to prune
cv <- cv.tree(planeTree)
library(tree)
#Making Decision Tree
planeTree <- tree(Customer.Type~Age + Flight.Distance + Departure.Delay.in.Minutes + Arrival.Delay.in.Minutes, data=planeTrain)
plot(planeTree)
text(planeTree, cex = .65, pretty = 1)
#Getting Accuracy
predTree <- predict(planeTree, newdata=planeTest, type="class")
mean(predTree == planeTest$Customer.Type)
#Find the size to prune
cv <- cv.tree(planeTree)
plot(cv$size, cv$dev, type='b')
#Prune tree
prunedPlaneTree <- prune.tree(planeTree, best=5)
plot(prunedPlaneTree)
text(prunedPlaneTree, cex = .65, pretty = 1)
#Getting Accuracy
predPruneTree <- predict(prunedPlaneTree, newdata=planeTest, type="class")
mean(predPruneTree == planeTest$Customer.Type)
#Find the size to prune
cv <- cv.tree(planeTree)
plot(cv$size, cv$dev, type='b')
#Prune tree
prunedPlaneTree <- prune.tree(planeTree, best=4)
plot(prunedPlaneTree)
text(prunedPlaneTree, cex = .65, pretty = 1)
#Getting Accuracy
predPruneTree <- predict(prunedPlaneTree, newdata=planeTest, type="class")
mean(predPruneTree == planeTest$Customer.Type)
#Find the size to prune
cv <- cv.tree(planeTree)
plot(cv$size, cv$dev, type='b')
#Prune tree
prunedPlaneTree <- prune.tree(planeTree, best=4)
plot(prunedPlaneTree)
text(prunedPlaneTree, cex = .65, pretty = 1)
#Getting Accuracy
predPruneTree <- predict(prunedPlaneTree, newdata=planeTest, type="class")
mean(predPruneTree == planeTest$Customer.Type)
#Find the size to prune
cv <- cv.tree(planeTree)
plot(cv$size, cv$dev, type='b')
#Prune tree
prunedPlaneTree <- prune.tree(planeTree, best=3)
plot(prunedPlaneTree)
text(prunedPlaneTree, cex = .65, pretty = 1)
#Getting Accuracy
predPruneTree <- predict(prunedPlaneTree, newdata=planeTest, type="class")
mean(predPruneTree == planeTest$Customer.Type)
#Find the size to prune
cv <- cv.tree(planeTree)
plot(cv$size, cv$dev, type='b')
#Prune tree
prunedPlaneTree <- prune.tree(planeTree, best=5)
plot(prunedPlaneTree)
text(prunedPlaneTree, cex = .65, pretty = 1)
#Getting Accuracy
predPruneTree <- predict(prunedPlaneTree, newdata=planeTest, type="class")
mean(predPruneTree == planeTest$Customer.Type)
library(tree)
#Making Decision Tree
planeTree <- tree(Customer.Type~Departure.Delay.in.Minutes + Arrival.Delay.in.Minutes, data=planeTrain)
plot(planeTree)
library(tree)
#Making Decision Tree
planeTree <- tree(Customer.Type~Arrival.Delay.in.Minutes, data=planeTrain)
plot(planeTree)
library(tree)
#Making Decision Tree
planeTree <- tree(Customer.Type~Flight.Distance + Departure.Delay.in.Minutes + Arrival.Delay.in.Minutes, data=planeTrain)
plot(planeTree)
text(planeTree, cex = .65, pretty = 1)
#Getting Accuracy
predTree <- predict(planeTree, newdata=planeTest, type="class")
mean(predTree == planeTest$Customer.Type)
library(tree)
#Making Decision Tree
planeTree <- tree(Customer.Type~Age + Flight.Distance + Departure.Delay.in.Minutes + Arrival.Delay.in.Minutes, data=planeTrain)
plot(planeTree)
text(planeTree, cex = .65, pretty = 1)
#Getting Accuracy
predTree <- predict(planeTree, newdata=planeTest, type="class")
mean(predTree == planeTest$Customer.Type)
View(airplaneData)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(3,6,20,21)]
uTest <- airplaneData[unlabeled==2, c(3,6,20,21)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
library(class)
#Get unlabeled data and labels
unlabeled <- sample(2, nrow(airplaneData), replace=TRUE, prob=c(.8,.2))
uTrain <- airplaneData[unlabeled==1, c(6,20)]
uTest <- airplaneData[unlabeled==2, c(6,20)]
uTrainLabel <- airplaneData[unlabeled==1, 2]
uTestLabel <- airplaneData[unlabeled==2, 2]
#Scale data
uTrainScale <- scale(uTrain)
uTestScale <- scale(uTest)
#KNN
knnPlane <- knn(train=uTrain, test=uTest, cl=uTrainLabel, k=3)
#Obtain Accuracy
knnResults <- knnPlane == uTestLabel
acc <- length(which(knnResults == TRUE)) / length(knnResults)
acc
